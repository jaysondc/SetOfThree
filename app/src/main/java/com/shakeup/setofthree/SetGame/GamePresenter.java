package com.shakeup.setofthree.SetGame;

import android.support.annotation.NonNull;

import com.shakeup.setgamelibrary.SetGame;

import java.util.ArrayList;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Created by Jayson on 3/2/2017.
 *
 * Handles all UI actions generated by the GameFragment class. The contract
 * between interactions is specified in GameContract.java
 */

public class GamePresenter implements GameContract.UserActionsListener {

    private SetGame mSetGame;
    private GameContract.View mGameView;

    /**
     * Public constructor used to set up the presenter. Requires a reference to the calling View.
     * @param gameView A reference to the calling View
     */
    public GamePresenter(
            @NonNull GameContract.View gameView) {
        mGameView = checkNotNull(gameView, "mainMenu cannot be null!");
    }

    /**
     * Create a new instance of a SET Game and pass the data back to the
     * game fragment to be displayed and interacted with
     */
    @Override
    public void initGame() {
        mSetGame = new SetGame();

        mGameView.displayGame(mSetGame.getSetHand());
    }

    /**
     * Handles SET claims thrown from the GameFragment
     * Calls the GameFragment success and failure handlers when appropriate.
     * This also
     * @param indexOne Index of the first card in the set.
     * @param indexTwo Index of the second card in the set.
     * @param indexThree Index of the third card in the set.
     */
    @Override
    public void submitSet(int indexOne, int indexTwo, int indexThree) {

        // Resolve set claim and obtain result
        boolean result = mSetGame.claimSet(indexOne, indexTwo, indexThree);

        if( !result ){
            // Call failure handler in UI
            mGameView.onSetFailure();
        } else {
            // Update the set hand
            mGameView.updateSetHand(
                    mSetGame.getIsOverflow(),
                    mSetGame.getDeckSize());

            // Call the GameOver method if the game is over,
            // otherwise handle SetSuccess
            if( mSetGame.getIsGameOver() ){
                mGameView.onGameOver();
            } else {
                mGameView.onSetSuccess();
            }
        }

    }

    public void setCardClicked(){
        mGameView.onSetCardClicked();
    }

    /**
     * Manually set an instance of the SetGame object.
     * @param game SetGame instance to be used.
     */
    public void setSetGame(SetGame game){
        mSetGame = game;
    }

    /**
     * Get the location of all available sets in the current board
     * @return An ArrayLilst of Triplets containing the indexes of
     * all available sets
     */
    public ArrayList<SetGame.Triplet<Integer, Integer, Integer>> getSetLocations(){
        return mSetGame.getLocationOfSets();
    }
}
