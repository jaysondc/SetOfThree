package com.shakeup.setofthree.setgame;

import android.support.annotation.NonNull;

import com.shakeup.setgamelibrary.SetGame;
import com.shakeup.setofthree.common.customviews.SetGameCardView;

import java.util.ArrayList;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Created by Jayson on 3/2/2017.
 * <p>
 * Handles all UI actions generated by the GameFragment class. The contract
 * between interactions is specified in GameContract.java
 */

public class GamePresenter implements GameContract.UserActionsListener {

    protected SetGame mSetGame;
    // ArrayList holding the current valid locations of sets
    protected ArrayList<SetGame.Triplet> mSetLocations;
    private GameContract.View mGameView;
    // Tag to tell if we're in debug mode
    protected boolean mIsDebug;
    // Triplet containing the current hint set
    protected SetGame.Triplet mHintTriplet;
    protected int mHintsHighlighted = 0;


    // Supply a default constructor
    public GamePresenter() {
    }

    /**
     * Public constructor used to set up the presenter. Requires a reference to the calling View.
     *
     * @param gameView A reference to the calling View
     */
    public GamePresenter(
            @NonNull GameContract.View gameView) {
        mGameView = checkNotNull(gameView, "gameView cannot be null!");
    }

    /**
     * Public method for setting a gameview to be used by subclasses
     *
     * @param gameView
     */
    public void setGameView(GameContract.View gameView) {
        mGameView = gameView;
    }

    /**
     * Create a new instance of a SET Game and pass the data back to the
     * game fragment to be displayed and interacted with
     */
    @Override
    public void initGame(SetGame existingGame) {
        // Initialize the SetGame object
        // Reuse the received game if it exists
        if (existingGame != null) {
            mSetGame = existingGame;
        } else {
            mSetGame = new SetGame(SetGame.DIFFICULTY_NORMAL);
        }

        // Get the location of valid sets on the board
        mSetLocations = mSetGame.getLocationOfSets();

        // Initialize the game display
        mGameView.displayGame(mSetGame.getSetHand());
    }

    /**
     * Handles SET claims thrown from the GameFragment
     * Calls the GamePresenter success and failure handlers when appropriate.
     * This also
     *
     * @param indexOne   Index of the first card in the set.
     * @param indexTwo   Index of the second card in the set.
     * @param indexThree Index of the third card in the set.
     */
    @Override
    public void onSubmitSet(int indexOne, int indexTwo, int indexThree) {

        // Resolve set claim and obtain result
        boolean result = mSetGame.claimSet(indexOne, indexTwo, indexThree);

        if (!result) {
            // Call presenter method to handle failure
            this.onSetFailure();
        } else {
            this.onSetSuccess();
        }

    }

    /**
     * Subclasses should override this method to perform additional actions to react
     * to SetFailure before the view is affected.
     */
    @Override
    public void onSetFailure() {
        mGameView.showFailAnimation();
        mGameView.onSetFailure();
        mGameView.clearChoices(false);
    }

    /**
     * Subclasses should override this method to perform additional actions to react
     * to SetSuccess before the view is affected.
     */
    @Override
    public void onSetSuccess() {
        // Reference to our presenter to use in the callback method
        final GamePresenter game = this;

        // Show the success animation, continue to update the game once it's finished
        mGameView.showSuccessAnimation(new SetGameCardView.AnimationEndCallback() {
            @Override
            public void onAnimationFinish() {
                mGameView.clearChoices(false);
                // Update the set hand
                mGameView.updateSetHand(
                        mSetGame.getIsOverflow(),
                        mSetGame.getDeckSize());

                // Call presenter method to handle success
                mGameView.onSetSuccess();

                // Call the GameOver method if the game is over,
                if (mSetGame.getIsGameOver()) {
                    game.onGameOver();
                }

                // Get the new SetLocations array
                mSetLocations = mSetGame.getLocationOfSets();

                // Clear the number of highlighted hints
                mHintTriplet = null;
                mHintsHighlighted = 0;
            }
        });
    }

    /**
     * Subclasses should override this method to perform additional actions to react
     * to GameOver before the view is affected.
     */
    @Override
    public void onGameOver() {
        mGameView.showGameOver();
    }

    /**
     * Handle clicks thrown from the board and react to them. This can be overridden
     * to perform additional actions whenever a card on the board is clicked
     */
    @Override
    public void onSetCardClick() {
        mGameView.onSetCardClicked();
    }

    /**
     * Store whether or not we're in debug mode
     * @param isDebug Whether or not we're in debug mode
     */
    @Override
    public void setIsDebug(boolean isDebug) {
        mIsDebug = isDebug;
    }

    /**
     * Highlight a valid set on the board. This only is used by debug mode to highlight
     * entire sets at a time.
     */
    public void highlightValidSet() {
        // If there are any sets left on the board
        if (mSetGame.getNumAvailableSets() > 0) {
            if (mHintTriplet == null) {
                // Get a random set
                mHintTriplet = mSetGame.getRandomSet();
            }

            // Highlight each index
            mGameView.highlightCard(mHintTriplet.getFirst());
            mGameView.highlightCard(mHintTriplet.getSecond());
            mGameView.highlightCard(mHintTriplet.getThird());
        }
    }

    /**
     * Highlight cards as hints. This highlights more cards from a set the more times
     * you press the hint button. If 3 cards are already highlighted do nothing. Subclasses
     * can wrap this class to add their own actions upon hint button clicks.
     *
     * @return whether or not a new card was highlighted
     */
    public boolean showHint() {
        // If there are any sets left on the board
        if (mSetGame.getNumAvailableSets() > 0) {
            if (mHintTriplet == null) {
                // Get a random set
                mHintTriplet = mSetGame.getRandomSet();
            }

            switch (mHintsHighlighted) {
                case 0:
                    // Highlight the first index
                    mGameView.highlightCard(mHintTriplet.getFirst());
                    mHintsHighlighted++;
                    return true;
                case 1:
                    // Highlight the second index
                    mGameView.highlightCard(mHintTriplet.getSecond());
                    mHintsHighlighted++;
                    return true;
                case 2:
                    // Highlight the third index
                    mGameView.highlightCard(mHintTriplet.getThird());
                    mHintsHighlighted++;
                    return true;
                default:
                    return false;
            }
        }
        return false;
    }

    /**
     * Get a reference to the SetGame for testing
     *
     * @return Reference to the current SetGame
     */
    public SetGame getSetGame() {
        return mSetGame;
    }

    /**
     * Manually set an instance of the SetGame object.
     *
     * @param game SetGame instance to be used.
     */
    public void setSetGame(SetGame game) {
        mSetGame = game;
    }

    /**
     * Get the location of all available sets in the current board
     *
     * @return An ArrayLilst of Triplets containing the indexes of
     * all available sets
     */
    public ArrayList<SetGame.Triplet> getSetLocations() {
        return mSetGame.getLocationOfSets();
    }
}
